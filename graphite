partial alphanumeric_keys
xkb_symbols "graphite" {
    include "us(basic)"
    name[Group1]= "English (Graphite)";

    // Define Right Alt as the modifier key to access the symbol layer (Level 3)
    key <RALT> { [ ISO_Level3_Shift ] };
    modifier_map Mod5 { <RALT> };

    key <TLDE> { [        grave,   asciitilde ] };
    key <AE01> { [            1,       exclam ] };
    key <AE02> { [            2,           at ] };
    key <AE03> { [            3,   numbersign ] };
    key <AE04> { [            7, 7,              braceright ] };
    key <AE05> { [            4,      percent ] };
    key <AE06> { [            5,  asciicircum ] };
    key <AE07> { [            6,    ampersand ] };
    key <AE08> { [            8, bracketright ] };
    key <AE09> { [            0,    parenleft ] };
    key <AE10> { [            9,   parenright ] };
    key <AE11> { [     asterisk,   braceright ] };
    key <AE12> { [  bracketleft,    braceleft ] };

    // Top Row
    key <AD01> { [            b,            B,       exclam ] };
    key <AD02> { [            l,            L,    braceleft ] };
    key <AD03> { [            d,            D,  bracketleft ] };
    key <AD04> { [            w,            W,   numbersign ] };
    key <AD05> { [            z,            Z,        equal ] };
    key <AD06> { [   apostrophe,   underscore,          bar ] };
    key <AD07> { [            f,            F,           at ] };
    key <AD08> { [            o,            O,    parenleft ] };
    key <AD09> { [            u,            U,       dollar ] };
    key <AD10> { [            j,            J,        grave ] };
    key <AD11> { [    semicolon,        colon ] };
    key <AD12> { [          bar,    backslash ] };

    // Home Row
    key <AC01> { [            n,            N,            1 ] };
    key <AC02> { [            r,            R,   asciitilde ] };
    key <AC03> { [            t,            T,       Return ] };
    key <AC04> { [            s,            S,            0 ] };
    key <AC05> { [            g,            G,    ampersand ] };
    key <AC06> { [            y,            Y,    backslash ] };
    key <AC07> { [            h,            H,         Left,        Page_Up ] };
    key <AC08> { [            a,            A,           Up,           Home ] };
    key <AC09> { [            e,            E,         Down,            End ] };
    key <AC10> { [            i,            I,        Right,      Page_Down ] };
    key <AC11> { [        comma,     question ] };
    key <BKSL> { [        equal,         plus ] };

    // Bottom Row
    key <AB01> { [            x,            X,            2 ] };
    key <AB02> { [            m,            M,            3 ] };
    key <AB03> { [            c,            C,            4 ] };
    key <AB04> { [            q,            Q,            5 ] };
    key <AB05> { [            v,            V,         plus ] };
    key <AB06> { [            k,            K,     asterisk ] };
    key <AB07> { [            p,            P,            6 ] };
    key <AB08> { [       period,      greater,       Escape ] };
    key <AB09> { [        minus,     quotedbl,  asciicircum ] };
    key <AB10> { [        slash,         less,      percent ] };

    // Swap Caps Lock and Backspace
    key <CAPS> { [  BackSpace,      BackSpace,       Delete ] };
    key <BKSP> { [  Caps_Lock                 ] };
    modifier_map Lock { <BKSP> };

    // --- Modifier Swaps ---
    
    // 1. Define what symbol each PHYSICAL key sends.
    // Left-hand three-way swap: Ctrl -> Alt, Alt -> Shift, Shift -> Ctrl
    replace key <LCTL> { [ Alt_L, Meta_L ] };
    replace key <LALT> { [ Shift_L ] };
    replace key <LFSH> { [ Control_L ] };
    
    // Right-hand two-way swap: R_Shift <-> R_Ctrl
    replace key <RTSH> { [ Control_R ] };
    replace key <RCTL> { [ Shift_R ] };

    // 2. Map the modifier STATES to the correct PHYSICAL keys.
    // The 'Control' state is now triggered by the physical Left Shift and Right Shift keys.
    modifier_map Control { <LFSH>, <RTSH> };
    // The 'Shift' state is now triggered by the physical Left Alt and Right Ctrl keys.
    modifier_map Shift   { <LALT>, <RCTL> };
    // The 'Alt' state (Mod1) is now triggered by the physical Left Ctrl key.
    modifier_map Mod1    { <LCTL> };
};
